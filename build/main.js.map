{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["/*\n * Created with @iobroker/create-adapter v2.3.0\n */\n\n// The adapter-core module gives you access to the core ioBroker functions\n// you need to create an adapter\nimport * as utils from '@iobroker/adapter-core';\n\n// Load your modules here, e.g.:\nimport DigestFetch from 'digest-fetch';\n// import * as fs from \"fs\";\n\nclass OchsnerRoomterminal extends utils.Adapter {\n\tprivate deviceInfoUrl = '';\n\n\tpublic constructor(options: Partial<utils.AdapterOptions> = {}) {\n\t\tsuper({\n\t\t\t...options,\n\t\t\tname: 'ochsner-roomterminal',\n\t\t});\n\t\tthis.on('ready', this.onReady.bind(this));\n\t\tthis.on('stateChange', this.onStateChange.bind(this));\n\t\t// this.on('objectChange', this.onObjectChange.bind(this));\n\t\t// this.on('message', this.onMessage.bind(this));\n\t\tthis.on('unload', this.onUnload.bind(this));\n\t}\n\n\t/**\n\t * Is called when databases are connected and adapter received configuration.\n\t */\n\tprivate async onReady(): Promise<void> {\n\t\t// Initialize your adapter here\n\t\tthis.main();\n\t}\n\n\t/**\n\t * Is called when adapter shuts down - callback has to be called under any circumstances!\n\t */\n\tprivate onUnload(callback: () => void): void {\n\t\ttry {\n\t\t\t// Here you must clear all timeouts or intervals that may still be active\n\t\t\t// clearTimeout(timeout1);\n\t\t\t// clearTimeout(timeout2);\n\t\t\t// ...\n\t\t\t// clearInterval(interval1);\n\n\t\t\tcallback();\n\t\t} catch (e) {\n\t\t\tcallback();\n\t\t}\n\t}\n\n\t// If you need to react to object changes, uncomment the following block and the corresponding line in the constructor.\n\t// You also need to subscribe to the objects with `this.subscribeObjects`, similar to `this.subscribeStates`.\n\t// /**\n\t//  * Is called if a subscribed object changes\n\t//  */\n\t// private onObjectChange(id: string, obj: ioBroker.Object | null | undefined): void {\n\t// \tif (obj) {\n\t// \t\t// The object was changed\n\t// \t\tthis.log.info(`object ${id} changed: ${JSON.stringify(obj)}`);\n\t// \t} else {\n\t// \t\t// The object was deleted\n\t// \t\tthis.log.info(`object ${id} deleted`);\n\t// \t}\n\t// }\n\n\t/**\n\t * Is called if a subscribed state changes\n\t */\n\tprivate onStateChange(id: string, state: ioBroker.State | null | undefined): void {\n\t\tif (state) {\n\t\t\t// The state was changed\n\t\t\tthis.log.info(`state ${id} changed: ${state.val} (ack = ${state.ack})`);\n\t\t} else {\n\t\t\t// The state was deleted\n\t\t\tthis.log.info(`state ${id} deleted`);\n\t\t}\n\t}\n\n\t// If you need to accept messages in your adapter, uncomment the following block and the corresponding line in the constructor.\n\t// /**\n\t//  * Some message was sent to this instance over message box. Used by email, pushover, text2speech, ...\n\t//  * Using this method requires \"common.messagebox\" property to be set to true in io-package.json\n\t//  */\n\t// private onMessage(obj: ioBroker.Message): void {\n\t// \tif (typeof obj === 'object' && obj.message) {\n\t// \t\tif (obj.command === 'send') {\n\t// \t\t\t// e.g. send email or pushover or whatever\n\t// \t\t\tthis.log.info('send command');\n\n\t// \t\t\t// Send response in callback if required\n\t// \t\t\tif (obj.callback) this.sendTo(obj.from, obj.command, 'Message received', obj.callback);\n\t// \t\t}\n\t// \t}\n\t// }\n\n\t/**\n\t * Private functions\n\t */\n\n\t/**\n\t * ----------------------------\n\t *  Inititialize the adapter\n\t * ----------------------------\n\t */\n\tprivate async main(): Promise<void> {\n\t\t// Reset the connection indicator during startup\n\t\tthis.setState('info.connection', false, true);\n\n\t\t// Initialize private instance variables\n\t\tthis.deviceInfoUrl = `http://${this.config.serverIP}/api/1.0/info/deviceinfo`;\n\n\t\t// The adapters config (in the instance object everything under the attribute \"native\") is accessible via\n\t\t// this.config:\n\t\tif (!this.config.serverIP) {\n\t\t\tthis.log.error('Server IP address configuration must not be emtpy');\n\t\t\treturn;\n\t\t}\n\n\t\tthis.log.info('config username: ' + this.config.username);\n\t\t// this.log.info('config password: ' + this.config.password);\n\t\tthis.log.info('config serverIP: ' + this.config.serverIP);\n\t\tthis.log.info('config pollInterval: ' + this.config.pollInterval);\n\n\t\t// check if connection to server is available with given credentials\n\t\tconst connected = await this.checkForConnection();\n\t\tif (!connected) {\n\t\t\treturn;\n\t\t}\n\t\tthis.setState('info.connection', true, true);\n\n\t\t/*\n\tFor every state in the system there has to be also an object of type state\n\tHere a simple template for a boolean variable named \"testVariable\"\n\tBecause every adapter instance uses its own unique namespace variable names can't collide with other adapters variables\n\t*/\n\t\tawait this.setObjectNotExistsAsync('testVariable', {\n\t\t\ttype: 'state',\n\t\t\tcommon: {\n\t\t\t\tname: 'testVariable',\n\t\t\t\ttype: 'boolean',\n\t\t\t\trole: 'indicator',\n\t\t\t\tread: true,\n\t\t\t\twrite: true,\n\t\t\t},\n\t\t\tnative: {},\n\t\t});\n\n\t\t// In order to get state updates, you need to subscribe to them. The following line adds a subscription for our variable we have created above.\n\t\tthis.subscribeStates('testVariable');\n\t\t// You can also add a subscription for multiple states. The following line watches all states starting with \"lights.\"\n\t\t// this.subscribeStates('lights.*');\n\t\t// Or, if you really must, you can also watch all states. Don't do this if you don't need to. Otherwise this will cause a lot of unnecessary load on the system:\n\t\t// this.subscribeStates('*');\n\n\t\t/*\n\t\tsetState examples\n\t\tyou will notice that each setState will cause the stateChange event to fire (because of above subscribeStates cmd)\n\t*/\n\t\t// the variable testVariable is set to true as command (ack=false)\n\t\tawait this.setStateAsync('testVariable', true);\n\n\t\t// same thing, but the value is flagged \"ack\"\n\t\t// ack should be always set to true if the value is received from or acknowledged from the target system\n\t\tawait this.setStateAsync('testVariable', { val: true, ack: true });\n\n\t\t// same thing, but the state is deleted after 30s (getState will return null afterwards)\n\t\tawait this.setStateAsync('testVariable', { val: true, ack: true, expire: 30 });\n\n\t\t// examples for the checkPassword/checkGroup functions\n\t\tlet result = await this.checkPasswordAsync('admin', 'iobroker');\n\t\tthis.log.info('check user admin pw iobroker: ' + result);\n\n\t\tresult = await this.checkGroupAsync('admin', 'admin');\n\t\tthis.log.info('check group user admin group admin: ' + result);\n\n\t\t// Start polling the OID's with the given pollingIntervall\n\t\tthis.poll();\n\t}\n\n\tprivate async poll(): Promise<void> {\n\t\tthis.log.debug('Polling....');\n\n\t\t// wait for the next value to read, log error (just in case)\n\t\tthis.wait(this.config.pollInterval)\n\t\t\t.then(() => this.poll())\n\t\t\t.catch((error) => {\n\t\t\t\tthis.log.error(JSON.stringify(error));\n\t\t\t\tthis.poll();\n\t\t\t});\n\t}\n\n\t/**\n\t * Wait helper function, used in polling routine\n\t * @param t time to wait\n\t * @returns Promise<number>\n\t */\n\tprivate wait(t: number): Promise<number> {\n\t\treturn new Promise((s) => setTimeout(s, t, t));\n\t}\n\t/**\n\t * Ochnser API for getting the DeviceInfo\n\t * @returns\n\t */\n\tprivate async checkForConnection(): Promise<boolean> {\n\t\tconst client = new DigestFetch(this.config.username, this.config.password);\n\n\t\tconst options = {\n\t\t\tmethod: 'get',\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/json; charset=UTF-8',\n\t\t\t\t'Cache-Control': 'no-cache',\n\t\t\t\tConnection: 'Keep-Alive',\n\t\t\t\tAccept: '*.*',\n\t\t\t},\n\t\t};\n\t\tthis.log.debug('DeviceInfo URL: ' + this.deviceInfoUrl);\n\t\ttry {\n\t\t\tconst response = await client.fetch(this.deviceInfoUrl, options);\n\t\t\tconst data = await response.json();\n\t\t\tthis.log.info('DeviceInfo: ' + JSON.stringify(data));\n\t\t} catch (error) {\n\t\t\tthis.log.error('Invalid username, password of server IP-address');\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n}\nif (require.main !== module) {\n\t// Export the constructor in compact mode\n\tmodule.exports = (options: Partial<utils.AdapterOptions> | undefined) => new OchsnerRoomterminal(options);\n} else {\n\t// otherwise start the instance directly\n\t(() => new OchsnerRoomterminal())();\n}\n"],
  "mappings": "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",
  "names": ["DigestFetch"]
}
