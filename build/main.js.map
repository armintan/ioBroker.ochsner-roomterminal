{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["/*\n * Created with @iobroker/create-adapter v2.3.0\n */\n\n// The adapter-core module gives you access to the core ioBroker functions\n// you need to create an adapter\nimport * as utils from '@iobroker/adapter-core';\n\n// Load your modules here, e.g.:\nimport DigestFetch from 'digest-fetch';\nimport { parseStringPromise } from 'xml2js';\nimport packageJson from '../package.json';\n// import * as fs from \"fs\";\nconst adapterName = packageJson.name.split('.').pop();\n\nclass OchsnerRoomterminal extends utils.Adapter {\n\tprivate deviceInfoUrl = '';\n\tprivate getUrl = '';\n\tprivate client: any | undefined = undefined;\n\tprivate timeoutID: NodeJS.Timeout | string | number | undefined = undefined;\n\n\tpublic constructor(options: Partial<utils.AdapterOptions> = {}) {\n\t\tsuper({\n\t\t\t...options,\n\t\t\tname: adapterName!,\n\t\t});\n\t\tthis.on('ready', this.onReady.bind(this));\n\t\tthis.on('stateChange', this.onStateChange.bind(this));\n\t\t// this.on('objectChange', this.onObjectChange.bind(this));\n\t\t// this.on('message', this.onMessage.bind(this));\n\t\tthis.on('unload', this.onUnload.bind(this));\n\t}\n\n\t/**\n\t * Is called when databases are connected and adapter received configuration.\n\t */\n\tprivate async onReady(): Promise<void> {\n\t\t// Initialize your adapter here\n\t\tthis.log.info(`Adapter Name: ${adapterName}`);\n\t\tthis.main();\n\t}\n\n\t/**\n\t * Is called when adapter shuts down - callback has to be called under any circumstances!\n\t */\n\tprivate onUnload(callback: () => void): void {\n\t\ttry {\n\t\t\t// timeout may still may active -> clear to stop polling\n\t\t\tclearTimeout(this.timeoutID);\n\t\t\tthis.log.debug('clear polling succeeded');\n\t\t\tcallback();\n\t\t} catch (e) {\n\t\t\tthis.log.error(`clear timeout error`);\n\t\t\t// this.log.debug(`clear timeout error: ${JSON.stringify(e, null, 2)}`);\n\t\t\tcallback();\n\t\t}\n\t}\n\n\t// If you need to react to object changes, uncomment the following block and the corresponding line in the constructor.\n\t// You also need to subscribe to the objects with `this.subscribeObjects`, similar to `this.subscribeStates`.\n\t// /**\n\t//  * Is called if a subscribed object changes\n\t//  */\n\t// private onObjectChange(id: string, obj: ioBroker.Object | null | undefined): void {\n\t// \tif (obj) {\n\t// \t\t// The object was changed\n\t// \t\tthis.log.info(`object ${id} changed: ${JSON.stringify(obj)}`);\n\t// \t} else { 17058\n\t// \t\t// The object was deleted\n\t// \t\tthis.log.info(`object ${id} deleted`);\n\t// \t}\n\t// }\n\n\t/**\n\t * Is called if a subscribed state changes\n\t */\n\tprivate onStateChange(id: string, state: ioBroker.State | null | undefined): void {\n\t\tif (state) {\n\t\t\t// The state was changed\n\t\t\tthis.log.info(`state ${id} changed: ${state.val} (ack = ${state.ack})`);\n\t\t} else {\n\t\t\t// The state was deleted\n\t\t\tthis.log.info(`state ${id} deleted`);\n\t\t}\n\t}\n\n\t// If you need to accept messages in your adapter, uncomment the following block and the corresponding line in the constructor.\n\t// /**\n\t//  * Some message was sent to this instance over message box. Used by email, pushover, text2speech, ...\n\t//  * Using this method requires \"common.messagebox\" property to be set to true in io-package.json\n\t//  */\n\t// private onMessage(obj: ioBroker.Message): void {\n\t// \tif (typeof obj === 'object' && obj.message) {\n\t// \t\tif (obj.command === 'send') {\n\t// \t\t\t// e.g. send email or pushover or whatever\n\t// \t\t\tthis.log.info('send command');\n\n\t// \t\t\t// Send response in callback if required\n\t// \t\t\tif (obj.callback) this.sendTo(obj.from, obj.command, 'Message received', obj.callback);\n\t// \t\t}\n\t// \t}\n\t// }\n\n\t/**\n\t * Private functions\n\t */\n\n\t/**\n\t * ----------------------------\n\t *  Inititialize the adapter\n\t * ----------------------------\n\t */\n\tprivate async main(): Promise<void> {\n\t\t// Reset the connection indicator during startup\n\t\tthis.setState('info.connection', false, true);\n\n\t\t// Initialize private instance variables\n\t\tthis.deviceInfoUrl = `http://${this.config.serverIP}/api/1.0/info/deviceinfo`;\n\t\tthis.getUrl = `http://${this.config.serverIP}/ws`;\n\t\tthis.client = new DigestFetch(this.config.username, this.config.password);\n\n\t\t// The adapters config (in the instance object everything under the attribute \"native\") is accessible via\n\t\t// this.config:\n\t\tif (!this.config.serverIP) {\n\t\t\tthis.log.error('Server IP address configuration must not be emtpy');\n\t\t\treturn;\n\t\t}\n\n\t\tthis.log.info('config username: ' + this.config.username);\n\t\t// this.log.info('config password: ' + this.config.password);\n\t\tthis.log.info('config serverIP: ' + this.config.serverIP);\n\t\tthis.log.info('config pollInterval: ' + this.config.pollInterval);\n\n\t\t// check if connection to server is available with given credentials\n\t\tconst connected = await this.checkForConnection();\n\t\tif (!connected) {\n\t\t\treturn;\n\t\t}\n\t\tthis.setState('info.connection', true, true);\n\n\t\t/*\n\tFor every state in the system there has to be also an object of type state\n\tHere a simple template for a boolean variable named \"testVariable\"\n\tBecause every adapter instance uses its own unique namespace variable names can't collide with other adapters variables\n\t*/\n\t\tawait this.setObjectNotExistsAsync('testVariable', {\n\t\t\ttype: 'state',\n\t\t\tcommon: {\n\t\t\t\tname: 'testVariable',\n\t\t\t\ttype: 'boolean',\n\t\t\t\trole: 'indicator',\n\t\t\t\tread: true,\n\t\t\t\twrite: true,\n\t\t\t},\n\t\t\tnative: {},\n\t\t});\n\n\t\t// In order to get state updates, you need to subscribe to them. The following line adds a subscription for our variable we have created above.\n\t\tthis.subscribeStates('testVariable');\n\t\t// You can also add a subscription for multiple states. The following line watches all states starting with \"lights.\"\n\t\t// this.subscribeStates('lights.*');\n\t\t// Or, if you really must, you can also watch all states. Don't do this if you don't need to. Otherwise this will cause a lot of unnecessary load on the system:\n\t\t// this.subscribeStates('*');\n\n\t\t// Start polling the OID's with the given pollingIntervall\n\t\tif (this.config.OIDs.length > 0) this.poll();\n\t}\n\n\t/**\n\t * Main polling routine - fetching next OID in list\n\t *\n\t * @description Started once during startup, restarts itself when finished\n\t */\n\tprivate async poll(index = 0): Promise<void> {\n\t\tthis.log.debug(`poll with index: ${index}`);\n\t\t// read the next OID from rommterminal\n\t\tawait this.readOID(index);\n\n\t\t// wait before reading the next OID, log error (just in case)\n\t\tthis.wait(this.config.pollInterval)\n\t\t\t.then(() => this.poll(index == this.config.OIDs.length - 1 ? 0 : index + 1))\n\t\t\t.catch((error) => {\n\t\t\t\tthis.log.error(`Error: ${JSON.stringify(error)}`);\n\t\t\t\tthis.poll();\n\t\t\t});\n\t}\n\n\t/**\n\t * Wait helper function, used in polling routine\n\t * @param t time to wait\n\t * @returns Promise<number>\n\t */\n\tprivate wait(t: number): Promise<number | void> {\n\t\treturn new Promise((s) => (this.timeoutID = setTimeout(s, t, t)));\n\t}\n\t/**\n\t * Ochnser API for getting the DeviceInfo\n\t * @returns\n\t */\n\tprivate async checkForConnection(): Promise<boolean> {\n\t\tconst options = {\n\t\t\tmethod: 'get',\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/json; charset=UTF-8',\n\t\t\t\t'Cache-Control': 'no-cache',\n\t\t\t\tConnection: 'Keep-Alive',\n\t\t\t\tAccept: '*.*',\n\t\t\t},\n\t\t};\n\t\tthis.log.debug('DeviceInfo URL: ' + this.deviceInfoUrl);\n\t\ttry {\n\t\t\tconst response = await this.client.fetch(this.deviceInfoUrl, options);\n\t\t\tconst data = await response.json();\n\t\t\tthis.log.info('DeviceInfo: ' + JSON.stringify(data));\n\t\t\tawait this.setStateAsync('deviceInfo.name', { val: data.device, ack: true });\n\t\t\tawait this.setStateAsync('deviceInfo.version', { val: data.version, ack: true });\n\t\t} catch (error) {\n\t\t\tthis.log.error('Invalid username, password or server IP-address in adapter configuration');\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Read OID from roomterminal, given by index\n\t *\n\t * @param index index of the OID etnry to tread in this.config.OiDs\n\t */\n\tprivate async readOID(index: number): Promise<void> {\n\t\t// this.log.debug(JSON.stringify(oids, null, 2));\n\t\t// this.log.debug(JSON.stringify(status, null, 2));\n\t\tconst oid = this.config.OIDs[index].oid;\n\t\tthis.log.info(`Polling OID: ${oid}`);\n\n\t\t// TODO: wrong UID error handling\n\n\t\tconst body = `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\t\t<SOAP-ENV:Envelope xmlns:SOAP-ENV=\"http://schemas.xmlsoap.org/soap/envelope/\" \n\t\txmlns:SOAP-ENC=\"http://schemas.xmlsoap.org/soap/encoding/\" \n\t\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" \n\t\txmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" \n\t\txmlns:ns=\"http://ws01.lom.ch/soap/\">\n\t\t <SOAP-ENV:Body>\n\t\t   <ns:getDpRequest>\n\t\t\t<ref>\n\t\t\t <oid>${oid}</oid>\n\t\t\t <prop/>\n\t\t\t</ref>\n\t\t\t<startIndex>0</startIndex>\n\t\t\t<count>-1</count>\n\t\t   </ns:getDpRequest>\n\t\t </SOAP-ENV:Body>\n\t\t</SOAP-ENV:Envelope>`;\n\n\t\tconst options = {\n\t\t\tmethod: 'post',\n\t\t\tbody: body,\n\t\t\theaders: {\n\t\t\t\tConnection: 'Keep-Alive',\n\t\t\t\tAccept: 'text/xml',\n\t\t\t\tPragma: 'no-cache',\n\t\t\t\tSOAPAction: 'http://ws01.lom.ch/soap/listDP',\n\t\t\t\t'Cache-Control': 'no-cache',\n\t\t\t\t'Content-Type': 'text/xml; charset=utf-8',\n\t\t\t\t'Content-length': body.length,\n\t\t\t},\n\t\t};\n\t\ttry {\n\t\t\tconst response = await this.client.fetch(this.getUrl, options);\n\t\t\tconst data = await response.text();\n\t\t\tconst jsonResult = await parseStringPromise(data);\n\t\t\tconst value = jsonResult['SOAP-ENV:Envelope']['SOAP-ENV:Body'][0]['ns:getDpResponse'][0].dpCfg[0].value[0];\n\t\t\tconst unit = jsonResult['SOAP-ENV:Envelope']['SOAP-ENV:Body'][0]['ns:getDpResponse'][0].dpCfg[0].unit[0];\n\t\t\tconst step = jsonResult['SOAP-ENV:Envelope']['SOAP-ENV:Body'][0]['ns:getDpResponse'][0].dpCfg[0].step[0];\n\t\t\tconst min = jsonResult['SOAP-ENV:Envelope']['SOAP-ENV:Body'][0]['ns:getDpResponse'][0].dpCfg[0].minValue[0];\n\t\t\tconst max = jsonResult['SOAP-ENV:Envelope']['SOAP-ENV:Body'][0]['ns:getDpResponse'][0].dpCfg[0].maxValue[0];\n\t\t\tlet common: ioBroker.StateCommon = {\n\t\t\t\tname: this.config.OIDs[index].name,\n\t\t\t\ttype: 'number',\n\t\t\t\trole: 'value',\n\t\t\t\tread: true,\n\t\t\t\twrite: this.config.OIDs[index].isWriteable,\n\t\t\t};\n\t\t\tcommon['unit'] = unit.length === 0 ? undefined : unit;\n\t\t\tcommon.min ??= min.length === 0 ? undefined : Number(min);\n\t\t\tcommon.max ??= max.length === 0 ? undefined : Number(max);\n\t\t\tcommon.step ??= max.length === 0 ? undefined : Number(step);\n\t\t\tthis.log.debug(`${JSON.stringify(common, null, 2)}`);\n\t\t\t// this.log.info(`data: ${JSON.stringify(result, null, 2)}`);\n\t\t\tif (value.length > 0) {\n\t\t\t\tthis.log.debug('Got a valid result: ' + value + unit);\n\n\t\t\t\t//TODO: add read / write based on XML\n\t\t\t\tthis.setObjectNotExists('OID.' + oid, {\n\t\t\t\t\ttype: 'state',\n\t\t\t\t\tcommon,\n\t\t\t\t\tnative: {},\n\t\t\t\t});\n\n\t\t\t\tthis.setState('OID.' + oid, { val: Number(value), ack: true });\n\t\t\t} else {\n\t\t\t\tthis.log.error(`result for ${oid} not valid`);\n\t\t\t\tthis.setState('info.connection', false, true);\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tthis.log.error(`OID read error: ${oid}`);\n\t\t}\n\t}\n}\n\nif (require.main !== module) {\n\t// Export the constructor in compact mode\n\tmodule.exports = (options: Partial<utils.AdapterOptions> | undefined) => new OchsnerRoomterminal(options);\n} else {\n\t// otherwise start the instance directly\n\t(() => new OchsnerRoomterminal())();\n}\n"],
  "mappings": "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",
  "names": ["packageJson", "DigestFetch"]
}
