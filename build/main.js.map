{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["/*\n * Created with @iobroker/create-adapter v2.3.0\n */\n\n// The adapter-core module gives you access to the core ioBroker functions\n// you need to create an adapter\nimport * as utils from '@iobroker/adapter-core';\n\n// Load your modules here, e.g.:\nimport DigestFetch from 'digest-fetch';\nimport { parseStringPromise } from 'xml2js';\nimport packageJson from '../package.json';\nimport { getEnumKeys } from './lib/util';\n\n// import * as fs from \"fs\";\nconst adapterName = packageJson.name.split('.').pop();\nconst getOptions = {\n\tmethod: 'get',\n\theaders: {\n\t\tConnection: 'Keep-Alive',\n\t\tAccept: 'text/xml',\n\t\tPragma: 'no-cache',\n\t\t'Cache-Control': 'no-cache',\n\t\t'Content-Type': 'text/xml; charset=utf-8',\n\t},\n};\n// /home/parallels/ioBroker.ochsner-roomterminal/node_modules/@types/iobroker/index.d.ts\nclass OchsnerRoomterminal extends utils.Adapter {\n\tprivate deviceInfoUrl = '';\n\tprivate getUrl = '';\n\tprivate client: any | undefined = undefined;\n\tprivate oidNamesDict: { [id: string]: string } | undefined = undefined;\n\tprivate oidEnumsDict: { [id: string]: string[] } | undefined = undefined;\n\tprivate oidUpdate: { [id: string]: string } = {};\n\n\tpublic constructor(options: Partial<utils.AdapterOptions> = {}) {\n\t\tsuper({\n\t\t\t...options,\n\t\t\tname: adapterName!,\n\t\t});\n\t\t// this.log.info(`Adapter Name: ${this.name}`);\n\t\t// this.log.info(`Adapter Instance: ${this.instance}`);\n\t\t// this.log.info(`Adapter Namespace: ${this.namespace}`);\n\t\tthis.on('ready', this.onReady.bind(this));\n\t\tthis.on('stateChange', this.onStateChange.bind(this));\n\t\t// this.on('objectChange', this.onObjectChange.bind(this));\n\t\t// this.on('message', this.onMessage.bind(this));\n\t\tthis.on('unload', this.onUnload.bind(this));\n\t}\n\n\t/**\n\t * Is called when databases are connected and adapter received configuration.\n\t */\n\tprivate async onReady(): Promise<void> {\n\t\t// Initialize your adapter here\n\t\tthis.subscribeStates('OID.*');\n\t\tthis.log.info(`Adapter Name: ${this.name} is ready !!!!!!`);\n\t\tthis.main();\n\t}\n\n\t/**\n\t * Is called when adapter shuts down - callback has to be called under any circumstances!\n\t */\n\tprivate onUnload(callback: () => void): void {\n\t\tcallback();\n\t}\n\n\t// If you need to react to object changes, uncomment the following block and the corresponding line in the constructor.\n\t// You also need to subscribe to the objects with `this.subscribeObjects`, similar to `this.subscribeStates`.\n\t// /**\n\t//  * Is called if a subscribed object changes\n\t//  */\n\t// private onObjectChange(id: string, obj: ioBroker.Object | null | undefined): void {\n\t// \tif (obj) {\n\t// \t\t// The object was changed\n\t// \t\tthis.log.info(`object ${id} changed: ${JSON.stringify(obj)}`);\n\t// \t} else { 17058\n\t// \t\t// The object was deleted\n\t// \t\tthis.log.info(`object ${id} deleted`);\n\t// \t}\n\t// }\n\n\t/**\n\t * Is called if a subscribed state changes\n\t */\n\tprivate async onStateChange(id: string, state: ioBroker.State | null | undefined): Promise<void> {\n\t\tconst oids = this.config.OIDs;\n\t\tif (state) {\n\t\t\tthis.log.info(`state ${id} changed: ${state.val} (ack = ${state.ack})`);\n\t\t\tconst index = oids.findIndex((elem) => id.endsWith(elem.oid));\n\t\t\tif (index == -1) {\n\t\t\t\tthis.log.error(`state ${id} not found in OID list`);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// this.log.debug(`adapter name: ${this.name}, namespace: ${this.namespace}`);\n\t\t\tthis.log.debug(`From: system.adapter.${this.name}`);\n\t\t\t// we are only interested in state changes, which are not from reading our OIDs\n\t\t\tif (!state.from.startsWith(`system.adapter.${this.name}`)) {\n\t\t\t\tthis.log.debug(`Writing OID ${JSON.stringify(oids[index].oid)}`);\n\t\t\t\tawait this.oidWrite(index, state.val);\n\t\t\t\tawait this.oidRead(index);\n\t\t\t}\n\t\t\t// The state was changed\n\t\t} else {\n\t\t\t// The state was deleted\n\t\t\tthis.log.info(`state ${id} deleted`);\n\t\t}\n\t}\n\n\t// If you need to accept messages in your adapter, uncomment the following block and the corresponding line in the constructor.\n\t// /**\n\t//  * Some message was sent to this instance over message box. Used by email, pushover, text2speech, ...\n\t//  * Using this method requires \"common.messagebox\" property to be set to true in io-package.json\n\t//  */\n\t// private onMessage(obj: ioBroker.Message): void {\n\t// \tif (typeof obj === 'object' && obj.message) {\n\t// \t\tif (obj.command === 'send') {\n\t// \t\t\t// e.g. send email or pushover or whatever\n\t// \t\t\tthis.log.info('send command');\n\n\t// \t\t\t// Send response in callback if required\n\t// \t\t\tif (obj.callback) this.sendTo(obj.from, obj.command, 'Message received', obj.callback);\n\t// \t\t}\n\t// \t}\n\t// }\n\n\t/**\n\t * Private functions\n\t */\n\n\t/**\n\t * ----------------------------\n\t *  Inititialize the adapter\n\t * ----------------------------\n\t */\n\tprivate async main(): Promise<void> {\n\t\t// Reset the connection indicator during startup\n\t\tthis.setState('info.connection', false, true);\n\n\t\t// Initialize private instance variables\n\t\tthis.deviceInfoUrl = `http://${this.config.serverIP}/api/1.0/info/deviceinfo`;\n\t\tthis.getUrl = `http://${this.config.serverIP}/ws`;\n\t\tthis.client = new DigestFetch(this.config.username, this.config.password);\n\n\t\tthis.log.info(`Config: ${JSON.stringify(this.config, null, 2)}`);\n\n\t\t// The adapters config (in the instance object everything under the attribute \"native\") is accessible via\n\t\t// this.config:\n\t\tif (!this.config.serverIP) {\n\t\t\tthis.log.error('Server IP address configuration must not be emtpy');\n\t\t\treturn;\n\t\t}\n\n\t\tthis.log.info('config username: ' + this.config.username);\n\t\t// this.log.info('config password: ' + this.config.password);\n\t\tthis.log.info('config serverIP: ' + this.config.serverIP);\n\t\tthis.log.info('config pollInterval: ' + this.config.pollInterval);\n\n\t\t// check if connection to server is available with given credentials\n\t\tconst connected = await this.checkForConnection();\n\t\tif (!connected) {\n\t\t\treturn;\n\t\t}\n\t\tthis.setState('info.connection', true, true);\n\n\t\t// In order to get state updates, you need to subscribe to them. The following line adds a subscription for our variable we have created above.\n\t\t// You can also add a subscription for multiple states. The following line watches all states starting with \"lights.\"\n\t\t// this.subscribeStates('lights.*');\n\t\t// Or, if you really must, you can also watch all states. Don't do this if you don't need to. Otherwise this will cause a lot of unnecessary load on the system:\n\t\t// this.subscribeStates('*');\n\n\t\t// load the oidNames and oiEnums dictionary\n\t\t// TODO: read both dictionary also, when device version changed\n\t\tthis.oidNamesDict = await this.oidGetNames();\n\t\tthis.oidEnumsDict = await this.oidGetEnums();\n\n\t\t// Start polling the OID's with the given pollingIntervall\n\t\tif (this.config.OIDs.length > 0) this.poll();\n\t}\n\n\t/**\n\t * Main polling routine - fetching next OID in list\n\t *\n\t * @description Started once during startup, restarts itself when finished\n\t * \t\t\t\t(only called when there is at least one oid)\n\t */\n\tprivate async poll(index = 0): Promise<void> {\n\t\t// this.log.debug(`poll with index: ${index}`);\n\n\t\t// read the next OID from rommterminal\n\t\tawait this.oidRead(index);\n\n\t\ttry {\n\t\t\tawait this.delay(this.config.pollInterval);\n\t\t\tif (index == this.config.OIDs.length - 1) {\n\t\t\t\tawait this.updateNativeOIDs(Object.keys(this.oidUpdate));\n\t\t\t\tthis.poll();\n\t\t\t} else this.poll(++index);\n\t\t} catch (error) {\n\t\t\tthis.log.error(`Error: ${JSON.stringify(error)}`);\n\t\t\tthis.poll();\n\t\t}\n\t}\n\n\t/**\n\t * update OIDs in instance object native\n\t * @param key key to update\n\t */\n\tprivate async updateNativeOIDs(keys: string[]): Promise<void> {\n\t\t// Check for empty names in config and add default names\n\t\tif (!keys.length) return;\n\t\ttry {\n\t\t\tconst instanceObj = await this.getForeignObjectAsync(`system.adapter.${this.namespace}`);\n\t\t\tif (instanceObj) {\n\t\t\t\t// this.log.debug(`Old native objects: ${JSON.stringify(instanceObj.native, null, 2)}`);\n\t\t\t\tkeys.forEach((key) => {\n\t\t\t\t\tconst index = instanceObj.native.OIDs.findIndex((oid: ioBroker.OID) => key === oid.oid);\n\t\t\t\t\tif (index !== -1) instanceObj.native.OIDs[index].name = this.oidUpdate[key] ?? key;\n\t\t\t\t});\n\t\t\t\t// this.log.debug(`New native objects: ${JSON.stringify(instanceObj.native, null, 2)}`);\n\t\t\t\tawait this.setForeignObjectAsync(`system.adapter.${this.namespace}`, instanceObj);\n\t\t\t\tthis.oidUpdate = {};\n\t\t\t\t// this.log.debug(`Instance object id: ${JSON.stringify(res, null, 2)}`);\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tthis.log.debug(`getObject error: ${JSON.stringify(error, null, 2)}`);\n\t\t}\n\t}\n\n\t/**\n\t * Ochnser API for getting the oidNames Dictionary,\n\t * \t\teither from file\n\t * \t\tor\n\t * \t\tfrom device (then stored to file)\n\t *\n\t * @returns oiNameDictionary\n\t */\n\tprivate async oidGetNames(): Promise<{ [id: string]: string }> {\n\t\tlet oidNamesDict: { [id: string]: string } = {};\n\t\tconst fileName = 'oidNames.json';\n\t\ttry {\n\t\t\tconst oidNamesExists = await this.fileExistsAsync(this.namespace, fileName);\n\t\t\tif (oidNamesExists) {\n\t\t\t\tthis.log.debug('oidNames exists');\n\t\t\t\tconst res = await this.readFileAsync(this.namespace, fileName);\n\t\t\t\t// @ts-expect-error Type of res in invalid.\n\t\t\t\toidNamesDict = JSON.parse(res.file);\n\t\t\t\t// this.log.info(`res: ${JSON.stringify(res.file)}`);\n\t\t\t} else {\n\t\t\t\tconst response = await this.client.fetch(\n\t\t\t\t\t'http://192.168.1.108/res/xml/VarIdentTexte_de.xml',\n\t\t\t\t\tgetOptions,\n\t\t\t\t);\n\t\t\t\tconst data = await response.text();\n\t\t\t\tconst result = await parseStringPromise(data);\n\n\t\t\t\tfor (const gnIndex in result['VarIdentTexte']['gn']) {\n\t\t\t\t\tfor (const mnIndex in result['VarIdentTexte']['gn'][gnIndex]['mn']) {\n\t\t\t\t\t\tlet gn = result['VarIdentTexte']['gn'][gnIndex]['$']['id'];\n\t\t\t\t\t\tlet mn = result['VarIdentTexte']['gn'][gnIndex]['mn'][mnIndex]['$']['id'];\n\t\t\t\t\t\tif (gn.length == 1) gn = '0' + gn;\n\t\t\t\t\t\tif (mn.length == 1) mn = '0' + mn;\n\t\t\t\t\t\tconst key = `${gn}:${mn}`;\n\t\t\t\t\t\toidNamesDict[key] = result['VarIdentTexte']['gn'][gnIndex]['mn'][mnIndex]['_'];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tawait this.writeFileAsync(this.namespace, fileName, JSON.stringify(oidNamesDict));\n\t\t\t\tthis.log.debug(`${fileName} wirtten to files`);\n\t\t\t\t// return oidNamesDict;\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tthis.log.error(`oidGetNames error: ${JSON.stringify(error)}`);\n\t\t}\n\t\treturn oidNamesDict;\n\t}\n\t/**\n\t * Ochnser API for getting the oidEnum Dictionary,\n\t * \t\teither from file\n\t * \t\tor\n\t * \t\tfrom device (then stored to file)\n\t *\n\t * @returns oidEnumDictionary\n\t */\n\tprivate async oidGetEnums(): Promise<{ [id: string]: string[] }> {\n\t\tlet oidEnumsDict: { [id: string]: string[] } = {};\n\t\tconst fileName = 'oidEnums.json';\n\t\ttry {\n\t\t\tconst oidEnumsExists = await this.fileExistsAsync(this.namespace, fileName);\n\t\t\tif (oidEnumsExists) {\n\t\t\t\tthis.log.debug('oidEnums exists');\n\t\t\t\tconst res = await this.readFileAsync(this.namespace, fileName);\n\t\t\t\t// @ts-expect-error Type of res in invalid.\n\t\t\t\toidEnumsDict = JSON.parse(res.file);\n\t\t\t\t// this.log.info(`res: ${JSON.stringify(res.file)}`);\n\t\t\t} else {\n\t\t\t\tconst response = await this.client.fetch(\n\t\t\t\t\t'http://192.168.1.108/res/xml/AufzaehlTexte_de.xml',\n\t\t\t\t\tgetOptions,\n\t\t\t\t);\n\t\t\t\tconst data = await response.text();\n\t\t\t\tconst result = await parseStringPromise(data);\n\t\t\t\t// console.log(JSON.stringify(result['AufzaehlTexte']['gn'], null, 2));\n\t\t\t\tfor (const gnIndex in result['AufzaehlTexte']['gn']) {\n\t\t\t\t\tfor (const mnIndex in result['AufzaehlTexte']['gn'][gnIndex]['mn']) {\n\t\t\t\t\t\tlet gn = result['AufzaehlTexte']['gn'][gnIndex]['$']['id'];\n\t\t\t\t\t\tlet mn = result['AufzaehlTexte']['gn'][gnIndex]['mn'][mnIndex]['$']['id'];\n\t\t\t\t\t\tgn = gn.length == 1 ? '0' + gn : gn;\n\t\t\t\t\t\tmn = mn.length == 1 ? '0' + mn : mn;\n\t\t\t\t\t\tconst key = `${gn}:${mn}`;\n\t\t\t\t\t\tconst enumArray: string[] = [];\n\t\t\t\t\t\tfor (const enumIndex in result['AufzaehlTexte']['gn'][gnIndex]['mn'][mnIndex]['enum']) {\n\t\t\t\t\t\t\tconst index = parseInt(\n\t\t\t\t\t\t\t\tresult['AufzaehlTexte']['gn'][gnIndex]['mn'][mnIndex]['enum'][enumIndex]['$']['id'],\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tenumArray[index] =\n\t\t\t\t\t\t\t\tresult['AufzaehlTexte']['gn'][gnIndex]['mn'][mnIndex]['enum'][enumIndex]['_'];\n\t\t\t\t\t\t}\n\t\t\t\t\t\toidEnumsDict[key] = enumArray;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tawait this.writeFileAsync(this.namespace, fileName, JSON.stringify(oidEnumsDict));\n\t\t\t\tthis.log.debug(`${fileName} wirtten to files`);\n\t\t\t\t// return oidEnumsDict;\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tconsole.log('error:', { error });\n\t\t}\n\t\treturn oidEnumsDict;\n\t}\n\t/**\n\t * Ochnser API for getting the DeviceInfo\n\t * @returns\n\t */\n\tprivate async checkForConnection(): Promise<boolean> {\n\t\t// this.log.debug('DeviceInfo URL: ' + this.deviceInfoUrl);\n\t\ttry {\n\t\t\tconst response = await this.client.fetch(this.deviceInfoUrl, getOptions);\n\t\t\tconst data = await response.json();\n\t\t\tthis.log.info('DeviceInfo: ' + JSON.stringify(data));\n\t\t\tthis.setStateAsync('deviceInfo.name', { val: data.device, ack: true });\n\t\t\tthis.setStateAsync('deviceInfo.version', { val: data.version, ack: true });\n\t\t} catch (error) {\n\t\t\tthis.log.error('Invalid username, password or server IP-address in adapter configuration');\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Read OID from roomterminal, given by index\n\t *\n\t * @param index index of the OID etnry to tread in this.config.OiDs\n\t */\n\tprivate async oidRead(index: number): Promise<void> {\n\t\t// this.log.debug(JSON.stringify(oids, null, 2));\n\t\t// this.log.debug(JSON.stringify(status, null, 2));\n\t\tconst oid = this.config.OIDs[index].oid;\n\t\tconst states: { [key: string]: string } = {};\n\n\t\t// TODO: wrong UID error handling\n\n\t\tconst body = `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\t\t<SOAP-ENV:Envelope xmlns:SOAP-ENV=\"http://schemas.xmlsoap.org/soap/envelope/\" \n\t\txmlns:SOAP-ENC=\"http://schemas.xmlsoap.org/soap/encoding/\" \n\t\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" \n\t\txmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" \n\t\txmlns:ns=\"http://ws01.lom.ch/soap/\">\n\t\t <SOAP-ENV:Body>\n\t\t   <ns:getDpRequest>\n\t\t\t<ref>\n\t\t\t <oid>${oid}</oid>\n\t\t\t <prop/>\n\t\t\t</ref>\n\t\t\t<startIndex>0</startIndex>\n\t\t\t<count>-1</count>\n\t\t   </ns:getDpRequest>\n\t\t </SOAP-ENV:Body>\n\t\t</SOAP-ENV:Envelope>`;\n\n\t\tconst options = {\n\t\t\tmethod: 'post',\n\t\t\tbody: body,\n\t\t\theaders: {\n\t\t\t\tConnection: 'Keep-Alive',\n\t\t\t\tAccept: 'text/xml',\n\t\t\t\tPragma: 'no-cache',\n\t\t\t\tSOAPAction: 'http://ws01.lom.ch/soap/getDP',\n\t\t\t\t'Cache-Control': 'no-cache',\n\t\t\t\t'Content-Type': 'text/xml; charset=utf-8',\n\t\t\t\t'Content-length': body.length,\n\t\t\t},\n\t\t};\n\t\ttry {\n\t\t\tconst response = await this.client.fetch(this.getUrl, options);\n\t\t\tconst data = await response.text();\n\t\t\tconst jsonResult = await parseStringPromise(data);\n\t\t\tconst name: string =\n\t\t\t\tjsonResult['SOAP-ENV:Envelope']['SOAP-ENV:Body'][0]['ns:getDpResponse'][0].dpCfg[0].name[0];\n\t\t\tconst prop: string =\n\t\t\t\tjsonResult['SOAP-ENV:Envelope']['SOAP-ENV:Body'][0]['ns:getDpResponse'][0].dpCfg[0].prop[0];\n\t\t\tconst desc: string =\n\t\t\t\tjsonResult['SOAP-ENV:Envelope']['SOAP-ENV:Body'][0]['ns:getDpResponse'][0].dpCfg[0].desc[0];\n\t\t\tconst value: string =\n\t\t\t\tjsonResult['SOAP-ENV:Envelope']['SOAP-ENV:Body'][0]['ns:getDpResponse'][0].dpCfg[0].value[0];\n\t\t\tconst unit: string =\n\t\t\t\tjsonResult['SOAP-ENV:Envelope']['SOAP-ENV:Body'][0]['ns:getDpResponse'][0].dpCfg[0].unit[0];\n\t\t\tconst step: string =\n\t\t\t\tjsonResult['SOAP-ENV:Envelope']['SOAP-ENV:Body'][0]['ns:getDpResponse'][0].dpCfg[0].step[0];\n\t\t\tconst min: string =\n\t\t\t\tjsonResult['SOAP-ENV:Envelope']['SOAP-ENV:Body'][0]['ns:getDpResponse'][0].dpCfg[0].minValue[0];\n\t\t\tconst max: string =\n\t\t\t\tjsonResult['SOAP-ENV:Envelope']['SOAP-ENV:Body'][0]['ns:getDpResponse'][0].dpCfg[0].maxValue[0];\n\t\t\t// this.log.debug(`${JSON.stringify(common, null, 2)}`);\n\t\t\tif (desc === 'Enum Var') {\n\t\t\t\t// this.log.debug(`desc: ${desc}`);\n\t\t\t\t// this.log.debug(`prop: ${prop}`);\n\t\t\t\t// this.log.debug(`name: ${name}`);\n\t\t\t\tconst enums = getEnumKeys(prop);\n\t\t\t\tif (enums) {\n\t\t\t\t\tthis.log.debug(`enums: ${enums}`);\n\t\t\t\t\t// this.log.debug(`${JSON.stringify(this.oidEnumsDict![name])}`);\n\n\t\t\t\t\tenums.forEach((e) => (states[e] = this.oidEnumsDict![name][Number(e)] ?? 'undefined'));\n\t\t\t\t\tthis.log.debug(`${JSON.stringify(states)}`);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst common: ioBroker.StateCommon = {\n\t\t\t\tname: this.config.OIDs[index].name.length ? this.config.OIDs[index].name : this.oidNamesDict![name],\n\t\t\t\ttype: 'number',\n\t\t\t\trole: 'value',\n\t\t\t\tread: prop[1] === 'r' ? true : false,\n\t\t\t\twrite: prop[2] === 'w' ? true : false,\n\t\t\t\tunit: unit.length === 0 ? undefined : unit,\n\t\t\t\tmin: min.length === 0 ? undefined : Number(min),\n\t\t\t\tmax: max.length === 0 ? undefined : Number(max),\n\t\t\t\tstep: step.length === 0 ? undefined : Number(step),\n\t\t\t\t//TODO: add states based on XML\n\t\t\t\tstates: Object.keys(states).length == 0 ? undefined : states,\n\t\t\t\t// states: { '0': 'OFF', '1': 'ON', '-3': 'whatever' },\n\t\t\t};\n\n\t\t\tif (this.config.OIDs[index].name.length === 0)\n\t\t\t\tthis.oidUpdate[this.config.OIDs[index].oid] = this.oidNamesDict![name] ?? name;\n\n\t\t\t// this.log.info(`data: ${JSON.stringify(result, null, 2)}`);\n\t\t\tif (value.length > 0) {\n\t\t\t\tthis.log.debug(`result for [${oid}]: ${value} ${unit}`);\n\n\t\t\t\tawait this.setObjectNotExistsAsync('OID.' + oid, {\n\t\t\t\t\ttype: 'state',\n\t\t\t\t\tcommon,\n\t\t\t\t\tnative: {},\n\t\t\t\t});\n\n\t\t\t\tthis.setState('OID.' + oid, { val: Number(value), ack: true });\n\t\t\t} else {\n\t\t\t\tthis.log.error(`result for ${oid} not valid`);\n\t\t\t\tthis.setState('info.connection', false, true);\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tthis.log.error(`OID read error: ${oid}`);\n\t\t}\n\t}\n\n\t/**\n\t * Write OID to roomterminal, given by index\n\t *\n\t * @param index index of the OID etnry to tread in this.config.OiDs\n\t */\n\tprivate async oidWrite(index: number, value: any): Promise<void> {\n\t\t// this.log.debug(JSON.stringify(oids, null, 2));\n\t\t// this.log.debug(JSON.stringify(status, null, 2));\n\t\tconst oid = this.config.OIDs[index].oid;\n\t\t// TODO: wrong UID error handling\n\t\tconst body = `\t\t<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\t\t<SOAP-ENV:Envelope xmlns:SOAP-ENV=\"http://schemas.xmlsoap.org/soap/envelope/\" \n\t\txmlns:SOAP-ENC=\"http://schemas.xmlsoap.org/soap/encoding/\" \n\t\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" \n\t\txmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" \n\t\txmlns:ns=\"http://ws01.lom.ch/soap/\">\n\t\t<SOAP-ENV:Body>\n\t\t  <ns:writeDpRequest>\n\t\t   <ref>\n\t\t\t<oid>${oid}</oid>\n\t\t\t<prop/>\n\t\t   </ref>\n\t\t   <dp>\n\t\t\t<index>0</index>\n\t\t\t<name/>\n\t\t\t<prop/>\n\t\t\t<desc/>\n\t\t\t<value>${value}</value>\n\t\t\t<unit/>\n\t\t\t<timestamp>0</timestamp>\n\t\t   </dp>\n\t\t  </ns:writeDpRequest>   \n\t\t</SOAP-ENV:Body>\n\t   </SOAP-ENV:Envelope>`;\n\n\t\tconst options = {\n\t\t\tmethod: 'post',\n\t\t\tbody: body,\n\t\t\theaders: {\n\t\t\t\tConnection: 'Keep-Alive',\n\t\t\t\tAccept: '*/*',\n\t\t\t\tPragma: 'no-cache',\n\t\t\t\tSOAPAction: 'http://ws01.lom.ch/soap/writeDP',\n\t\t\t\t'Cache-Control': 'no-cache',\n\t\t\t\t'Content-Type': 'text/xml; charset=utf-8',\n\t\t\t\t'Content-length': body.length,\n\t\t\t},\n\t\t};\n\t\ttry {\n\t\t\tthis.log.debug(`Writing OID ${oid} with value: ${value}}`);\n\t\t\tconst response = await this.client.fetch(this.getUrl, options);\n\t\t\tthis.log.debug(`response for ${oid} : ${JSON.stringify(response)}`);\n\t\t\tthis.setState('info.connection', false, true);\n\t\t} catch (error) {\n\t\t\tthis.log.error(`OID (${oid})read error: ${JSON.stringify(error)}`);\n\t\t}\n\t}\n}\n\nif (require.main !== module) {\n\t// Export the constructor in compact mode\n\tmodule.exports = (options: Partial<utils.AdapterOptions> | undefined) => new OchsnerRoomterminal(options);\n} else {\n\t// otherwise start the instance directly\n\t(() => new OchsnerRoomterminal())();\n}\n"],
  "mappings": "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",
  "names": ["packageJson", "DigestFetch", "_a"]
}
